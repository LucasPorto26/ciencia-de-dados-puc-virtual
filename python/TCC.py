{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "        <script type=\"text/javascript\">\n",
       "        window.PlotlyConfig = {MathJaxConfig: 'local'};\n",
       "        if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}\n",
       "        if (typeof require !== 'undefined') {\n",
       "        require.undef(\"plotly\");\n",
       "        requirejs.config({\n",
       "            paths: {\n",
       "                'plotly': ['https://cdn.plot.ly/plotly-latest.min']\n",
       "            }\n",
       "        });\n",
       "        require(['plotly'], function(Plotly) {\n",
       "            window._Plotly = Plotly;\n",
       "        });\n",
       "        }\n",
       "        </script>\n",
       "        "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "oi\n",
      "1303\n",
      "1303\n",
      "oi\n",
      "1275\n",
      "1275\n",
      "              Open         High          Low        Close    Adj Close  \\\n",
      "count  1021.000000  1021.000000  1021.000000  1021.000000  1021.000000   \n",
      "mean     17.821401    18.084251    17.522870    17.790548    16.938085   \n",
      "std       7.164016     7.207320     7.100975     7.152208     7.132328   \n",
      "min       4.200000     4.270000     4.120000     4.230000     3.924259   \n",
      "25%      12.960000    13.050000    12.700000    12.870000    11.939769   \n",
      "50%      16.250000    16.549999    16.020000    16.190001    15.353781   \n",
      "75%      25.049999    25.420000    24.660000    24.990000    23.848036   \n",
      "max      30.889999    31.240000    30.500000    30.969999    30.698339   \n",
      "\n",
      "             Volume      clClose  \n",
      "count  1.021000e+03  1021.000000  \n",
      "mean   5.669655e+07    52.669461  \n",
      "std    3.087118e+07    10.045782  \n",
      "min    0.000000e+00    26.209999  \n",
      "25%    3.733110e+07    45.939999  \n",
      "50%    4.992090e+07    51.500000  \n",
      "75%    6.750720e+07    59.980000  \n",
      "max    2.548138e+08    76.410004  \n",
      "Low   :0.3365189659747937\n",
      "Open  :0.33544506379284367\n",
      "High  :0.3320061749384132\n",
      "Close :0.3364339519591608\n",
      "Open sec :0.3363419659619341\n",
      "High sec :0.3453514080707254\n",
      "Low   :0.7745236360592791\n",
      "Open  :0.7763908828600342\n",
      "High  :0.7811515869689389\n",
      "Close :0.7777678565854536\n",
      "Open sec :0.7790097636366502\n",
      "High sec :0.7788310108366753\n"
     ]
    }
   ],
   "source": [
    "'''\n",
    "    Modelo para análise e predição do valor máximo do ativo PETR4.\n",
    "''' \n",
    "\n",
    "import pandas as pandas\n",
    "import scipy as sp\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import plotly.graph_objects as go\n",
    "import plotly.offline as py\n",
    "import statsmodels.formula.api as sm\n",
    "import time\n",
    "\n",
    "from scipy import stats\n",
    "from plotly.offline import plot, iplot, init_notebook_mode\n",
    "init_notebook_mode(connected=True)\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.metrics import mean_squared_error\n",
    "from datetime import datetime\n",
    "\n",
    "################### Análise dos Dados Dollar USDBRL=X.csv #######################\n",
    "dataFrameDollar = pandas.read_csv (\"../dataset/USDBRL=X.csv\", sep=',')\n",
    "print('oi')\n",
    "print(dataFrameDollar[\"Close\"].count())\n",
    "print(dataFrameDollar[\"Open\"].count())\n",
    "dataFrameDollar.head()\n",
    "dataFrameDollar.isnull().sum()\n",
    "dataFrameDollar = dataFrameDollar.dropna()\n",
    "dataFrameDollar.shape\n",
    "dataFrameDollar.describe()\n",
    "\n",
    "\n",
    "################### Análise dos Dados Crude Oil Sep 20 (CL=F) #######################\n",
    "dataFrameOleoCru = pandas.read_csv (\"../dataset/CL=F.csv\", sep=',')\n",
    "print('oi')\n",
    "print(dataFrameOleoCru[\"Close\"].count())\n",
    "print(dataFrameOleoCru[\"Open\"].count())\n",
    "dataFrameOleoCru.head()\n",
    "dataFrameOleoCru.isnull().sum()\n",
    "dataFrameOleoCru = dataFrameOleoCru.dropna()\n",
    "dataFrameOleoCru.shape\n",
    "dataFrameOleoCru.describe()\n",
    "\n",
    "\n",
    "################### Análise dos Dados ativo Petr4 #######################\n",
    "dataFramePetr4 = pandas.read_csv (\"../dataset/PETR4.SA.csv\", sep=',')\n",
    "\n",
    "dataFramePetr4[\"clClose\"] = dataFrameOleoCru[\"Close\"]\n",
    "\n",
    "dataFramePetr4.head()\n",
    "dataFramePetr4.tail()\n",
    "dataFramePetr4.isnull().sum()\n",
    "dataFramePetr4 = dataFramePetr4.dropna()\n",
    "dataFramePetr4.shape\n",
    "print(dataFramePetr4.describe())\n",
    "\n",
    "dictionary_plot_values = [\n",
    "                            ('Open',    dataFramePetr4.Date, dataFramePetr4.Open,   \"PETR4 Open\",      '#FFFF00', \"Ativo Petr4 Open\",      '2015-07-15', '2020-07-14'),\n",
    "                            ('High',    dataFramePetr4.Date, dataFramePetr4.High,   \"PETR4 High\",      '#17BECF', \"Ativo Petr4 High\",      '2015-07-15', '2020-07-14'),\n",
    "                            ('Close',   dataFramePetr4.Date,dataFramePetr4.Close,   \"PETR4 Close\",     '#ADFF2F', \"Ativo Petr4 Close\",     '2015-07-15', '2020-07-14'),\n",
    "                            ('Low',     dataFramePetr4.Date,dataFramePetr4.Low,     \"PETR4 Low\",       '#FF1493', \"Ativo Petr4 Low\",       '2015-07-15', '2020-07-14'),\n",
    "                            ('clClose', dataFramePetr4.Date,dataFramePetr4.clClose, \"Preço do Barril\", '#FF0000', \"Preço do Barril Close\", '2015-07-15', '2020-07-14')\n",
    "                         ]\n",
    "\n",
    "def plotDataSet(column_date, column_type, name_, color_code, title_name, datefrom, dateUntil):\n",
    "    \n",
    "    type_column = go.Scatter( x=column_date, y=column_type, name = name_, line = dict(color = color_code), opacity = 0.8)\n",
    "    data = [type_column]\n",
    "    layout = dict(title = title_name,title_x= 0.5,xaxis = dict(range = [datefrom, dateUntil]))\n",
    "    fig = dict(data=data, layout=layout)\n",
    "    py.iplot(fig, filename = name_)\n",
    "    \n",
    "def convertDateToTimeStamp(dateIn, dataFramePetr4):\n",
    "    \n",
    "    dataPetr4 = dateIn\n",
    "    arrayDate = []\n",
    "    arrayDateReplace = []\n",
    "    cont = 0\n",
    "    for date in dataPetr4:\n",
    "        dt = datetime.strptime(date, '%Y-%m-%d')\n",
    "        ts = time.mktime(dt.timetuple())\n",
    "        arrayDate.insert(cont,ts)\n",
    "        date = date.replace('-','')\n",
    "        arrayDateReplace.insert(cont, date)\n",
    "        cont+=1\n",
    "        \n",
    "    dataFramePetr4['timeStamp'] = arrayDate\n",
    "    print(dataFramePetr4['timeStamp'])\n",
    "    dataFramePetr4['dateReplace'] = arrayDateReplace\n",
    "        \n",
    "def candleSticks(dataFramePetr4):\n",
    "    datasetUmAno = dataFramePetr4.head(180)\n",
    "    data = go.Candlestick(x=datasetUmAno.Date, open=datasetUmAno.Open, high=datasetUmAno.High, low=datasetUmAno.Low, close=datasetUmAno.Close)\n",
    "    data = [data]\n",
    "    py.offline.iplot(data, filename='Candlestick Petr4')\n",
    "\n",
    "def linearRegression(dataFramePetr4):\n",
    "    regression = sm.ols(formula='clClose~Open+High+Low+Close', data=dataFramePetr4).fit()\n",
    "    print(regression.summary())\n",
    "    return regression\n",
    "\n",
    "def areThereCorrelation(dataFramePetr4, dataFrameDollar):\n",
    "    print('Low   :' + str(dataFramePetr4[\"Low\"].corr(dataFrameDollar[\"Low\"])))   \n",
    "    print('Open  :' + str(dataFramePetr4[\"Open\"].corr(dataFrameDollar[\"Open\"])))   \n",
    "    print('High  :' + str(dataFramePetr4[\"High\"].corr(dataFrameDollar[\"High\"])))\n",
    "    print('Close :' + str(dataFramePetr4[\"Close\"].corr(dataFrameDollar[\"Close\"])))\n",
    "    \n",
    "    print('Open sec :' + str(dataFramePetr4[\"Open\"].corr(dataFrameDollar[\"Close\"])))   \n",
    "    print('High sec :' + str(dataFramePetr4[\"High\"].corr(dataFrameDollar[\"Low\"])))\n",
    "\n",
    "\n",
    "def correlationChart(x, y):\n",
    "    #plt.scatter(x,y,color='b')\n",
    "    plt.plot(x,y,zorder=1) \n",
    "    plt.scatter(x,y,zorder=2)\n",
    "    plt.xlabel('Petr4 preço Máximo')\n",
    "    plt.ylabel('Preco Barril Fechamento')\n",
    "    plt.axis([min(x),max(x),min(y),max(y)])\n",
    "    plt.autoscale('False')\n",
    "    plt.show()\n",
    "\n",
    "def prepareToTestAndTrainingBases(dataFramePetr4):\n",
    "    dataTrainingWithoutMax  = dataFramePetr4;\n",
    "    dataTrainingWithoutMax  = dataTrainingWithoutMax.drop(columns=['High'])\n",
    "    dataTrainingWithoutMax  = dataTrainingWithoutMax.drop(columns=['Date'])\n",
    "    print(dataTrainingWithoutMax.describe())\n",
    "\n",
    "    #Atribuindo apenas o valor máximo\n",
    "    dataTrainingHigh = dataFramePetr4[\"High\"]\n",
    "\n",
    "    #Dividindo as bases em teste e treino\n",
    "    X_dataTrainning, X_dataTest, y_dataTrainning, y_dataTest = train_test_split(dataTrainingWithoutMax, dataTrainingHigh,test_size=0.2, random_state=0)\n",
    "\n",
    "    print(\" ---------------- Treino ------------------ \")\n",
    "    print(X_dataTrainning)\n",
    "    print(y_dataTrainning)\n",
    "    print(\"Teste\")\n",
    "    print(\" ---------------- X_dataTest ------------------ \")\n",
    "    print(y_dataTest)\n",
    "    print(X_dataTest)\n",
    "    \n",
    "    #Regressão Linear\n",
    "    linearRegressionModel = LinearRegression()\n",
    "    linearRegressionModel.fit(X_dataTrainning, y_dataTrainning)\n",
    "    print(linearRegressionModel.coef_)\n",
    "    \n",
    "    #Validação e acertividade do modelo\n",
    "    RMSE = mean_squared_error(y_dataTest, linearRegressionModel.predict(X_dataTest))**0.5\n",
    "    print(\"Acertividade do modelo : \" + str(RMSE))\n",
    "    \n",
    "    X_predict = linearRegressionModel.predict(X_dataTest)\n",
    "    \n",
    "    plotDataSet(dataFramePetr4['Date'][:205], y_dataTest, 'Valores Reais', '#FF5733', 'Valores Reais','2015-07-15', '2016-07-15')\n",
    "    plotDataSet(dataFramePetr4['Date'][:205], X_predict, 'Valores Preditos', '#3374FF', 'Valores preditos','2015-07-15', '2016-07-15')\n",
    "    \n",
    "    return X_predict\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    \n",
    "    #for plot_values in dictionary_plot_values:\n",
    "        #plotDataSet(plot_values[1], plot_values[2], plot_values[3], plot_values[4], plot_values[5], plot_values[6], plot_values[7])\n",
    "    \n",
    "    #convertDateToTimeStamp(dataFramePetr4[\"Date\"], dataFramePetr4)    \n",
    "    #candleSticks(dataFramePetr4)    \n",
    "    #candleSticks(dataFrameOleoCru)\n",
    "    #linearRegression(dataFramePetr4)\n",
    "    areThereCorrelation(dataFramePetr4,dataFrameDollar)\n",
    "    areThereCorrelation(dataFramePetr4,dataFrameOleoCru)\n",
    "    #correlationChart(dataFramePetr4.High[:365], dataFramePetr4.clClose[:365])\n",
    "    #prepareToTestAndTrainingBases(dataFramePetr4)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
